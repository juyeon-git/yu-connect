rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // 로그인 여부
    function isSignedIn() {
      return request.auth != null;
    }

    // 관리자 여부 (존재 확인 추가)
    function isAdmin() {
      return isSignedIn() && (
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') ||
        (exists(/databases/$(database)/documents/admins/$(request.auth.uid)) &&
         (get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role in ['admin','superAdmin']))
      );
    }

    // 슈퍼관리자 여부
    function isSuperAdmin() {
      return isSignedIn() &&
        get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.role == 'superAdmin';
    }

    // 특정 민원의 소유자인가
    function isOwnerByComplaint(complaintId) {
      return isSignedIn() &&
        get(/databases/$(database)/documents/complaints/$(complaintId)).data.ownerUid == request.auth.uid;
    }

    // ---------- users ----------
    match /users/{uid} {
      // 본인 또는 관리자 읽기/수정 가능
      allow read, update: if isSignedIn() && (request.auth.uid == uid || isAdmin());

      // 본인만 생성 가능
      allow create: if isSignedIn() && request.auth.uid == uid;

      // 관리자만 삭제 가능
      allow delete: if isAdmin();
    }

    // ---------- student_map ----------
    match /student_map/{studentId} {
      // 중복 체크 위해 누구나 읽기 가능
      allow get, list: if true;

      // 생성: 로그인된 사용자가 자기 uid 넣는 경우만 허용
      allow create: if isSignedIn()
        && request.resource.data.uid == request.auth.uid
        && request.resource.data.email is string;

      // 수정/삭제: 관리자만 가능
      allow update, delete: if isAdmin();
    }

    // ---------- complaints + replies ----------
    match /complaints/{id} {
      // 민원 생성: 본인만 가능
      allow create: if isSignedIn() && request.auth.uid == request.resource.data.ownerUid;

      // 민원 읽기: 본인, done 상태, 관리자만 가능
      allow read: if isSignedIn() && (
        resource.data.ownerUid == request.auth.uid ||
        resource.data.status == 'done' ||
        isAdmin()
      );

      // 수정/삭제: 관리자만 가능
      allow update, delete: if isAdmin();

      // ✅ 댓글 규칙
      match /replies/{rid} {
        // 모든 로그인 사용자 읽기 가능
        allow read: if true;

        // 관리자(admin) OR 민원 작성자(owner)만 댓글 작성 가능
        allow create: if 
          (isAdmin()
            && request.resource.data.senderUid == request.auth.uid
            && request.resource.data.senderRole == 'admin'
            && request.resource.data.message is string
            && request.resource.data.message.size() > 0)
          ||
          (isOwnerByComplaint(id)
            && request.resource.data.senderUid == request.auth.uid
            && request.resource.data.senderRole == 'owner'
            && request.resource.data.message is string
            && request.resource.data.message.size() > 0);

        // 댓글 수정/삭제: 관리자만 가능
        allow update, delete: if isAdmin();
      }
    }

    // ---------- events ----------
    match /events/{eventId} {
      allow read: if true;
      allow create, delete: if isAdmin();

      // update: 관리자 OR 학생 신청/취소
      allow update: if
        isAdmin()
        ||
        (
          isSignedIn()
          && request.resource.data.keys().hasAll(resource.data.keys())
          && request.resource.data.diff(resource.data).changedKeys().hasOnly(['participants','updatedAt'])

          && (
            // 신청 (+1 본인 추가)
            (request.resource.data.participants.size() == resource.data.participants.size() + 1
              && request.resource.data.participants.hasAll(resource.data.participants)
              && request.resource.data.participants.hasAny([request.auth.uid]))

            // 취소 (-1 본인 제거)
            || (request.resource.data.participants.size() == resource.data.participants.size() - 1
              && resource.data.participants.hasAll(request.resource.data.participants)
              && resource.data.participants.hasAny([request.auth.uid]))
          )
        );

      // ✅ 참가자 서브컬렉션: 관리자만 쓰기/삭제 허용 (읽기는 모두 허용)
      match /participants/{pid} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
      }
    }

    // ---------- banners ----------
    match /banners/{bannerId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // ---------- admins ----------
    match /admins/{uid} {
      allow get: if isSignedIn() && (request.auth.uid == uid || isSuperAdmin());
      allow list: if isSuperAdmin();

      allow create: if isSignedIn()
        && request.auth.uid == uid
        && request.resource.data.role == 'pending';

      allow update: if (isSignedIn()
        && request.auth.uid == uid
        && !request.resource.data.diff(resource.data).changedKeys()
          .hasAny(['role','approvedBy','uid','email']))
        || isSuperAdmin();

      allow delete: if isSuperAdmin();
    }
  }
}
